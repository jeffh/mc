package smpm

import (
	"bytes"
	"compress/zlib"
	"crypto/md5"
	"fmt"
	. "github.com/jeffh/goexpect"
	"io"
	"os"
	"path/filepath"
	"testing"
)

type sampleMetadata struct {
	hasSkylightData      bool
	isGroundUpContinuous bool
	metadatas            []ChunkColumnMetadata
	index                int16
}

func (s *sampleMetadata) ChunkColumnCount() int16 {
	return int16(len(s.metadatas))
}

func (s *sampleMetadata) HasSkylightData() bool {
	return s.hasSkylightData
}

func (s *sampleMetadata) IsGroundUpContinuous() bool {
	return s.isGroundUpContinuous
}

func (s *sampleMetadata) NextMetadata() ChunkColumnMetadata {
	index := s.index
	s.index += 1
	return s.metadatas[index]
}

var sampleChunkColumnMetadata = &sampleMetadata{
	hasSkylightData:      true,
	isGroundUpContinuous: true,
	metadatas: []ChunkColumnMetadata{
		{-17, 14, 31, 0},
		{-16, 14, 31, 0},
		{-16, 15, 31, 0},
		{-17, 15, 31, 0},
		{-18, 15, 31, 0},
	},
}

func fixtureAsReader(filename string) io.Reader {
	buf := bytes.NewBuffer([]byte{})
	filepath, err := filepath.Abs(filename)
	if err != nil {
		panic(err)
	}

	fi, err := os.Open(filepath)
	if err != nil {
		panic(err)
	}
	defer fi.Close()

	_, err = io.Copy(buf, fi)
	if err != nil {
		panic(err)
	}
	return buf
}

func TestReadingWithNoReaderIsAnError(t *testing.T) {
	smpm := NewFile(nil, sampleChunkColumnMetadata, nil)
	_, err := smpm.Parse()
	Expect(t, err.Error(), ToEqual, "No Reader specified")
}

func fill(array []byte, value byte) {
	for i := 0; i < len(array); i++ {
		array[i] = value
	}
}

func hash(bytes []byte) string {
	hasher := md5.New()
	hasher.Write(bytes)
	return fmt.Sprintf("%x", hasher.Sum(nil))
}

func TestReadingBulkChunk(t *testing.T) {
	r := fixtureAsReader("fixtures/sample.bin.zlib")
	reader, err := zlib.NewReader(r)
	Expect(t, err, ToBeNil)

	smpm := NewFile(reader, sampleChunkColumnMetadata, nil)
	columns, err := smpm.Parse()
	Expect(t, err, ToBeNil)

	Expect(t, columns, ToBeLengthOf, 5)
	Expect(t, columns[0].Metadata, ToEqual, &sampleChunkColumnMetadata.metadatas[0])
	Expect(t, columns[1].Metadata, ToEqual, &sampleChunkColumnMetadata.metadatas[1])
	Expect(t, columns[2].Metadata, ToEqual, &sampleChunkColumnMetadata.metadatas[2])
	Expect(t, columns[3].Metadata, ToEqual, &sampleChunkColumnMetadata.metadatas[3])
	Expect(t, columns[4].Metadata, ToEqual, &sampleChunkColumnMetadata.metadatas[4])

	chunks := columns[0].Chunks
	chunk := chunks[0]

	Expect(t, chunk.Types, ToEqual, types)
	Expect(t, chunk.Light, ToEqual, light)
	Expect(t, chunk.Metadata, ToEqual, make([]byte, 2048))
	Expect(t, chunk.Add, ToEqual, make([]byte, 2048))
	Expect(t, chunk.Skylight, ToEqual, make([]byte, 2048))
	biome := [256]byte{}
	fill(biome[:], 5)
	Expect(t, columns[0].Biome, ToEqual, biome)
	// assert hashes.. otherwise there would be a lot of data below...

	emptyChunkType := "620f0b67a91f7f74151bc5be745b7110"
	Expect(t, hash(chunks[0].Types), ToEqual, "4175bf9ee021b392893d87638f43370e")
	Expect(t, hash(chunks[1].Types), ToEqual, "ebaf454b9465fec94a6265659edc00b2")
	Expect(t, hash(chunks[2].Types), ToEqual, "d9c9e8403b128e2f3dba60a987e364bc")
	Expect(t, hash(chunks[3].Types), ToEqual, "f413f073856a9d97e3c4b205e9be650b")
	Expect(t, hash(chunks[4].Types), ToEqual, "9e24686b31a0f08d1b875cb64434aeef")
	Expect(t, hash(chunks[5].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[6].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[7].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[8].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[9].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[10].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[11].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[12].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[13].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[14].Types), ToEqual, emptyChunkType)
	Expect(t, hash(chunks[15].Types), ToEqual, emptyChunkType)

	emptyMetadata := "c99a74c555371a433d121f551d6c6398"
	Expect(t, hash(chunks[0].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[1].Metadata), ToEqual, "e99dfa2266eb6569926d882e0161cfbc")
	Expect(t, hash(chunks[2].Metadata), ToEqual, "24179311124cb33c7811e51e4572a4b7")
	Expect(t, hash(chunks[3].Metadata), ToEqual, "1bbc42fb8501444b1d70f7616bc9e70e")
	Expect(t, hash(chunks[4].Metadata), ToEqual, "74ba179fddcfc3fb292c8f8549b20ee3")
	Expect(t, hash(chunks[5].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[6].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[7].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[8].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[9].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[10].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[11].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[12].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[13].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[14].Metadata), ToEqual, emptyMetadata)
	Expect(t, hash(chunks[15].Metadata), ToEqual, emptyMetadata)

	emptyLight := "c99a74c555371a433d121f551d6c6398"
	Expect(t, hash(chunks[0].Light), ToEqual, "9feb71a54cde3554322f06482eb8cb85")
	Expect(t, hash(chunks[1].Light), ToEqual, "7a6dc760c0c9d5b05986ec8677179262")
	Expect(t, hash(chunks[2].Light), ToEqual, "c7a68653d300db6010f61783a75f8c87")
	Expect(t, hash(chunks[3].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[4].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[5].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[6].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[7].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[8].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[9].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[10].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[11].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[12].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[13].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[14].Light), ToEqual, emptyLight)
	Expect(t, hash(chunks[15].Light), ToEqual, emptyLight)

	emptySkylight := "c99a74c555371a433d121f551d6c6398"
	Expect(t, hash(chunks[0].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[1].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[2].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[3].Skylight), ToEqual, "d5703ee5485a1e4006f98113a1e321af")
	Expect(t, hash(chunks[4].Skylight), ToEqual, "dec5d71f50653241f61c41962653a441")
	Expect(t, hash(chunks[5].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[6].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[7].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[8].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[9].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[10].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[11].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[12].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[13].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[14].Skylight), ToEqual, emptySkylight)
	Expect(t, hash(chunks[15].Skylight), ToEqual, emptySkylight)

	emptyAdd := "c99a74c555371a433d121f551d6c6398"
	for i := 0; i < len(chunks); i++ {
		Expect(t, hash(chunks[i].Add), ToEqual, emptyAdd)
	}

	Expect(t, hash(columns[0].Biome[:]), ToEqual, "4dc2ca0ea9f82fef07b074d713086bed")
}

var light = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0,
	0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255,
	255, 255, 15, 0, 0, 255, 255, 255, 255, 255, 15, 0, 0, 255, 255, 255, 255, 255,
	15, 0, 0, 255, 0, 240, 255, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 255, 255,
	0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 15, 0, 255, 255, 255, 255, 255,
	255, 255, 15, 255, 255, 255, 255, 255, 255, 255, 255, 15, 0, 240, 255, 255, 255,
	255, 255, 0, 0, 0, 0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0,
	240, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240,
	255, 255, 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 240, 255, 255, 255, 255, 0, 0, 0, 0,
	0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 240, 255, 255, 0, 0,
	0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 15, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0,
	0, 0, 0, 0, 240, 255, 255, 0, 0, 0, 0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 255,
	255, 0, 0, 0, 0, 0, 240, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 255, 15, 0, 0, 0, 0,
	240, 255, 255, 15, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 240, 255, 0, 0, 0,
	0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 240, 255, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 240, 255, 255, 0,
	240, 255, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 238, 13, 0, 0, 0, 0, 0, 0,
	238, 14, 144, 0, 0, 0, 0, 0, 238, 222, 0, 137, 0, 0, 0, 0, 238, 222, 188, 154,
	120, 0, 0, 0, 238, 13, 171, 137, 103, 5, 0, 224, 221, 0, 0, 120, 86, 6, 0, 224,
	0, 0, 0, 0, 101, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 238,
	160, 203, 0, 0, 0, 0, 224, 238, 176, 220, 0, 0, 0, 0, 238, 238, 192, 237, 238,
	0, 0, 224, 238, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 221, 12, 0, 0, 0, 0, 0, 0, 221, 205,
	171, 0, 0, 0, 0, 0, 221, 205, 171, 137, 7, 0, 0, 0, 221, 205, 171, 137, 103, 5,
	0, 0, 221, 188, 154, 120, 86, 6, 0, 0, 204, 0, 128, 103, 101, 135, 0, 0, 187, 0,
	0, 80, 118, 152, 10, 220, 170, 9, 0, 0, 135, 169, 203, 221, 153, 169, 0, 0, 0,
	169, 203, 221, 152, 186, 0, 0, 0, 176, 220, 221, 169, 203, 0, 0, 0, 0, 0, 0,
	176, 220, 221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	11, 0, 0, 0, 0, 0, 0, 0, 188, 10, 0, 0, 0, 0, 0, 0, 204, 171, 0, 0, 0, 0, 0, 0,
	204, 188, 154, 8, 0, 0, 0, 0, 204, 188, 154, 120, 6, 0, 0, 0, 204, 188, 154,
	120, 86, 0, 0, 0, 204, 171, 137, 103, 69, 101, 0, 0, 187, 0, 112, 86, 84, 118,
	8, 176, 170, 9, 0, 64, 101, 135, 169, 203, 153, 8, 0, 0, 118, 152, 186, 204,
	136, 152, 0, 0, 112, 152, 186, 204, 135, 169, 0, 0, 0, 169, 203, 204, 152, 186,
	0, 0, 0, 0, 0, 0, 160, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 9, 0, 0, 0, 0, 0, 0, 187, 154, 8, 0,
	0, 0, 0, 0, 187, 171, 137, 7, 0, 0, 0, 0, 187, 171, 137, 103, 0, 0, 0, 0, 187,
	171, 137, 103, 5, 0, 0, 0, 187, 10, 120, 86, 50, 4, 0, 0, 170, 0, 0, 37, 67,
	101, 0, 160, 153, 0, 0, 0, 84, 118, 152, 186, 136, 7, 0, 0, 96, 135, 169, 187,
	119, 7, 0, 0, 96, 135, 169, 187, 118, 152, 0, 0, 0, 144, 186, 187, 128, 169, 0,
	0, 0, 0, 0, 0, 144, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 170, 128, 7, 0, 0, 0,
	0, 0, 170, 154, 8, 0, 0, 0, 0, 0, 170, 10, 120, 0, 0, 0, 0, 0, 170, 10, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 101,
	135, 160, 119, 0, 0, 0, 0, 118, 152, 10, 102, 0, 0, 0, 0, 112, 152, 170, 0, 0,
	0, 0, 0, 0, 160, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}

var types = []byte{
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 15, 1, 7, 7, 7, 7, 7, 7,
	1, 7, 7, 1, 7, 7, 1, 7, 1, 1, 7, 7, 7, 7, 1, 1, 1, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7,
	7, 7, 1, 1, 1, 1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 1, 1, 7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 1, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7,
	7, 7, 7, 1, 1, 7, 7, 7, 1, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1, 1, 7, 7,
	7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 3, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7,
	7, 7, 7, 7, 3, 7, 7, 7, 1, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 1, 7, 1, 15, 7, 7, 7, 3, 3, 7, 7, 1, 1, 7,
	1, 1, 1, 7, 7, 1, 7, 7, 1, 1, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 1, 1, 7,
	7, 7, 1, 7, 1, 7, 1, 1, 1, 7, 1, 1, 7, 7, 7, 1, 1, 7, 7, 1, 7, 7, 1, 7, 1, 1, 1,
	7, 7, 7, 7, 1, 1, 7, 7, 1, 7, 7, 1, 7, 1, 7, 1, 7, 7, 7, 1, 7, 7, 7, 1, 1, 1, 1,
	1, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 1, 1, 7, 7, 1, 7, 1, 1, 7, 7, 7, 7, 7, 7, 1, 1,
	7, 7, 1, 7, 7, 1, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 1, 1, 1, 1, 1, 1, 7, 7,
	1, 7, 7, 1, 1, 7, 7, 7, 7, 7, 1, 7, 1, 7, 1, 1, 1, 1, 7, 1, 7, 7, 1, 7, 7, 7, 1,
	73, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 1, 3, 7, 7, 7, 1, 1, 7, 1, 7, 1, 7, 1, 1, 7,
	7, 1, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1,
	7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 1, 7, 7, 7, 1,
	7, 1, 1, 1, 7, 7, 7, 3, 7, 3, 3, 1, 1, 1, 7, 7, 7, 1, 1, 1, 7, 1, 1, 1, 1, 1, 7,
	7, 1, 7, 7, 1, 1, 1, 7, 1, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 7, 7, 7,
	1, 7, 7, 7, 1, 1, 7, 1, 1, 1, 7, 7, 7, 1, 1, 7, 1, 1, 7, 7, 1, 7, 1, 1, 1, 7, 7,
	7, 1, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 1, 7, 1, 7, 1, 7, 7, 1, 7, 7, 1, 7, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 1, 7, 7, 1, 1, 1, 7, 7, 1, 7, 7, 1, 7, 7, 7, 1, 1,
	7, 1, 7, 7, 1, 1, 1, 1, 73, 73, 7, 1, 1, 7, 1, 1, 1, 1, 7, 7, 7, 7, 7, 1, 1, 1,
	7, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 7, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 1, 7, 1, 1,
	7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 7, 3, 3, 3, 1, 7, 7, 7, 7, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 7, 3, 15, 7, 1, 1, 1, 7, 1, 1, 7, 1, 7, 1, 1, 1, 7, 7, 7, 1,
	1, 7, 7, 1, 1, 7, 1, 7, 1, 7, 1, 1, 1, 1, 7, 1, 1, 1, 1, 7, 1, 1, 1, 3, 1, 1, 1,
	1, 7, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 73, 1, 1, 7, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 1, 73, 1, 1, 7, 1, 1, 7, 1, 1, 7, 1, 7, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 7, 7, 7, 1, 1, 1,
	7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 1, 1, 1, 7, 1, 1, 7,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 73, 7, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 7, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 7, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 7, 1, 1, 1, 1, 7, 1, 1,
	1, 7, 1, 1, 1, 7, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 7, 1, 1, 3, 15, 15,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 15, 7, 1, 7, 1, 1, 1, 7, 1, 1, 1, 7,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 73, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 11, 10, 11, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 73, 11, 11, 11, 11, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11,
	10, 11, 11, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 10, 11, 1, 1, 1, 1, 1, 11, 11, 10, 11, 11, 11, 11, 11, 10, 11, 11, 1, 1, 1,
	1, 1, 11, 11, 1, 1, 1, 11, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 73, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 10, 10, 11, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 1, 1, 1, 11, 10, 11, 10,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 11, 11, 11, 11, 11, 11,
	10, 11, 11, 11, 11, 11, 11, 11, 11, 1, 1, 1, 73, 11, 11, 10, 11, 11, 11, 10, 11,
	11, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 10, 1, 1, 1, 1, 1, 1,
	1, 1, 73, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 73, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 11, 11, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 11, 1, 1, 1,
	1, 1, 1, 1, 14, 73, 1, 1, 1, 1, 1, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 10, 11, 11, 1, 1, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11,
	10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 1, 1, 1,
	1, 1, 1, 1, 10, 11, 11, 11, 11, 10, 11, 11, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 11, 11, 11, 10, 1, 1, 1, 1, 1, 1, 1, 73, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1,
	1, 1, 1, 1, 73, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	11, 10, 11, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 1, 1, 1, 1, 1,
	1, 1, 1, 73, 73, 1, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 73, 73, 11, 11,
	11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11,
	11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 10, 11, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 11, 11, 11, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11,
	11, 15, 1, 1, 1, 1, 1, 1, 1, 1, 73, 1, 11, 11, 10, 11, 11, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 11, 11, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 10, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 11, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 10, 11, 10, 11, 10, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 11, 11, 10, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11,
	11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 1, 1, 1, 11, 11, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 1, 1, 11, 11, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 11, 11, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 1, 1,
	1, 11, 11, 11, 1, 1, 1, 1, 11, 10, 11, 10, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13,
	13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 0, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 13, 13, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 13, 13, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 1, 1, 1, 0, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 16, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 16,
	16, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 13, 13, 13, 13,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 0, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 13,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 16, 16, 16, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 16, 16, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 13, 13, 13, 13, 13, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	0, 0, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 16, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 1, 1, 16, 16, 15, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 15, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 0, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 15, 15, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,
	1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 13, 13, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
